openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/LANGARIRANO/capstone/1.0.0
  - description: TrashArt API
    url: https://protected-wildwood-76190-32f8f3b83dd9.herokuapp.com/
info:
  description: This is a TrashArt API
  version: "1.0.0"
  title: TrashArt API

security:
  - bearerAuth: []
tags:
  - name: users
    description: Operations available to regular users
paths:
  /:
    get:
      tags:
        - users
      summary: index
      operationId: checkAPI
      description: index
      responses:
        '200':
          description: API RUNNING

  /user/register:
    post:
      tags:
        - users
      summary: Register a new user
      operationId: registerUser
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
      responses:
        '201':
          description: User created
        '400':
          description: 'Please fill all fields or failed to create user'
        '422':
          description: password and confirm password does not match
        '409':
          description: Email already exists
  
  # /user/verify:
  #   post:
  #     tags:
  #       - users
  #     summary: Verify user
  #     operationId: verifyUser
  #     description: Verify user
  #     parameters:
  #       - name: email
  #         in: query
  #         description: email
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/verify'
  #     responses:
  #       '200':
  #         description: User verified
  #       '400':
  #         description: 'Please fill all fields, Wrong otp, or failed to verify user'
  #       '401':
  #         description: Invalid credentials
  #       '404':
  #         description: user does not exist
                
  /user/login:
    post:
      tags:
        - users
      summary: Login a user
      operationId: loginUser
      description: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in
        '400':
          description: 'Please fill all fields, or user already exists'
        '401':
          description: Invalid credentials
        '404': 
          description: email does not exist or user is not verified
          
  /user/profile:
    get:
      tags:
        - users
      summary: Get user profile
      operationId: getUserProfile
      description: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
        '401':
          description: Unautorizhed
          
  /user/getusers:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getUsers
      description: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All users
        '401':
          description: Unautorizhed    
  /user/predict:
    # post file emage
    post:
      tags:
        - users
      summary: Predict image
      operationId: predictImage
      description: Predict image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPredict'
      responses:
        '200':
          description: Predicted image
        '401':
          description: Unautorizhed



          
components:
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: example@example.com
        password:
          type: string
          format: password
          example: password123
          
    register:
      type: object
      required:
        - username
        - email
        - password
        - phone
        - confirmPassword
      properties:
        username:
          type: string
          example: test user
        email:
          type: string
          format: email
          example: example@example.com
        phone:
          type: string
          example: "081234567890"
        password:
          type: string
          format: password
          example: password123
        confirmPassword:
          type: string
          format: password
          example: password123
    
    # verify:
    #   type: object
    #   required:
    #     - otp
    #   properties:
    #     otp:
    #       type: string
    #       format: number
    #       example: 123456

    UserPredict:
      type: object
      required:
        - imgFile
      properties:
        imgFile:
          type: string
          format: binary
          example: image.jpg


